name: Build and Publish Docker Image

on:
  push:
    branches: [main]
    tags: ['v*']   # crea también tags semver si etiquetas v1.2.3

# ==== Variables globales (cámbialas aquí si hiciera falta) ====
env:
  OWNER: peter-palmer
  REPO: tornasol
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ env.OWNER }}/${{ env.REPO }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- amd64 ---
          - name: app
            dockerfile: ./docker/app.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-app
            platform: linux/amd64
            arch: amd64
          - name: db
            dockerfile: ./docker/db.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-db
            platform: linux/amd64
            arch: amd64
          - name: realtime
            dockerfile: ./docker/realtime.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-realtime
            platform: linux/amd64
            arch: amd64

          # --- arm64 ---
          - name: app
            dockerfile: ./docker/app.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-app
            platform: linux/arm64
            arch: arm64
          - name: db
            dockerfile: ./docker/db.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-db
            platform: linux/arm64
            arch: arm64
          - name: realtime
            dockerfile: ./docker/realtime.Dockerfile
            image: ${{ env.IMAGE_PREFIX }}-realtime
            platform: linux/arm64
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=latest-${{ matrix.arch }},enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr,suffix=-${{ matrix.arch }}
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}}.{{patch}},suffix=-${{ matrix.arch }}
            type=sha,format=long,suffix=-${{ matrix.arch }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}      # construye una arquitectura por job
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=build-v3
          cache-to: type=gha,mode=max,scope=build-v3
          provenance: false
          sbom: false

  create-manifests:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        include:
          - image: ${{ env.IMAGE_PREFIX }}-app
          - image: ${{ env.IMAGE_PREFIX }}-db
          - image: ${{ env.IMAGE_PREFIX }}-realtime

    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract manifest tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=sha,format=long

      - name: Create and push manifest
        run: |
          set -euo pipefail
          for manifest_tag in ${{ steps.meta.outputs.tags }}; do
            echo "Creating manifest for $manifest_tag"
            amd64_image="${manifest_tag}-amd64"
            arm64_image="${manifest_tag}-arm64"
            docker manifest inspect "$amd64_image" >/dev/null 2>&1 || { echo "Missing $amd64_image"; exit 1; }
            docker manifest inspect "$arm64_image" >/dev/null 2>&1 || { echo "Missing $arm64_image"; exit 1; }
            docker manifest create "$manifest_tag" "$amd64_image" "$arm64_image"
            docker manifest push "$manifest_tag"
          done
